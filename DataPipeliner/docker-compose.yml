version: '3.9'

services:
  postgres:
    image: postgres:13
    container_name: datapipeliner-postgres-1
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    networks:
      - airflow-net

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio-data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - airflow-net

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ./ollama_data:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0:11434
    restart: unless-stopped
    networks:
      - airflow-net

  airflow-init:
    build: .
    depends_on:
      ollama:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: <your_fernet_key>
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_ENDPOINT: minio:9000
    volumes:
      - ./requirements.txt:/requirements.txt
      - ./dags:/opt/airflow/dags
      - ./Transforms:/opt/airflow/Transforms
    command: >
      bash -c "
        echo 'Waiting for Ollama to be ready...' &&
        sleep 10 &&
        echo 'Pulling llama3:latest model' &&
        curl -X POST -H 'Content-Type: application/json' -d '{\"name\":\"llama3:latest\"}' http://ollama:11434/api/pull &&
        echo 'Model pull complete' &&
        pip install -r /requirements.txt &&
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin || true
      "
    networks:
      - airflow-net

  airflow-webserver:
    build: .
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__WEBSERVER__SECRET_KEY: <your_webserver_secret_key>
      AIRFLOW__CORE__FERNET_KEY: <your_fernet_key>
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      OLLAMA_BASE_URL: http://ollama:11434
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_ENDPOINT: minio:9000
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./minio-data:/opt/airflow/minio-data
      - ./Transforms:/opt/airflow/Transforms
      - ./.env:/opt/airflow/.env
    ports:
      - "8080:8080"
    user: "50000:0"
    command: webserver
    networks:
      - airflow-net

  airflow-scheduler:
    build: .
    restart: always
    depends_on:
      airflow-webserver:
        condition: service_started
      postgres:
        condition: service_healthy
      ollama:
        condition: service_started
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: <your_fernet_key>
      OLLAMA_BASE_URL: http://ollama:11434
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_ENDPOINT: minio:9000
    volumes:
      - ./dags:/opt/airflow/dags
      - ./Transforms:/opt/airflow/Transforms
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./minio-data:/opt/airflow/minio-data
      - ./requirements.txt:/requirements.txt
      - ./.env:/opt/airflow/.env
    command: >
      bash -c "
        sleep 60 &&
        airflow scheduler
      "
    networks:
      - airflow-net

  rag-ui:
    build:
      context: . 
      dockerfile: ./dags/Dockerfile 
    container_name: rag-ui
    depends_on:
      - minio
      - ollama
    ports:
      - "8000:8000"
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_ENDPOINT=minio:9000
      - CHROMA_LOCAL_PATH=/opt/airflow/minio-data/chroma/chroma_store
      - SENTENCE_TRANSFORMERS_HOME=/app/cache

    #command: >
      #@bash -c "
        #python main.py
      #"
      
    networks:
      - airflow-net

volumes:
  postgres-db-volume:
  ollama_data:

networks:
  airflow-net:
    driver: bridge